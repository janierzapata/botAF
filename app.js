require("dotenv").config();
const { regex } = require("./regex");
const {
  createBot,
  createProvider,
  createFlow,
  addKeyword,
  EVENTS,
} = require("@bot-whatsapp/bot");

const QRPortalWeb = require("@bot-whatsapp/portal");
const BaileysProvider = require("@bot-whatsapp/provider/baileys");
const MongoAdapter = require("@bot-whatsapp/database/mongo");

//* service
const { getProgram, validateHour } = require("./services/service");
const { costos, services, conditions } = require("./data.json");

//? Variables de entorno
const IDLE = parseInt(process.env.IDLE);
const TIMEOUT = parseInt(process.env.TIMEOUT);
const ADVISER = parseInt(process.env.ADVISER);

const programs = JSON.parse(process.env.PROGRAMS_IDS);

const returnToPrograms = (gotoFlow) => {
  setTimeout(() => {
    return gotoFlow(flowmenuprograms);
  }, TIMEOUT);
};

//*  Declaramos las conexiones de Mongo
const MONGO_DB_URI = "mongodb://localhost:27017";
const MONGO_DB_NAME = "db_bot";

const flowexit = addKeyword(EVENTS.ACTION)
  .addAnswer("¬°Gracias por utilizar nuestros servicios, estamos para servirte!")
  .addAnswer("Deseo que tengas un excelente d√≠a. ¬°Hasta la pr√≥xima!");

const flowmenuprograms = addKeyword(EVENTS.ACTION).addAnswer(
  [
    "Selecciona la acci√≥n que deseas realizar",
    "1) ¬øQue se ve en este programa?",
    "2) Jornadas de estudio",
    "3) Costos ",
    "4) Matricularse",
    "",
    "0) Regresar al men√∫ principal",
    "8) Regresar al men√∫ anterior",
    "9) Salir",
  ],
  { capture: true, idle: IDLE },
  async (ctx, { gotoFlow, fallBack, flowDynamic, state }) => {
    if (ctx?.idleFallBack) {
      return gotoFlow(flowexit);
    }

    let str;
    switch (ctx.body) {
      case "1":
        str = "*En este programa ver√°s el siguiente contenido:* \n";

        state.getMyState().searchedProgram.content.map((item) => {
          str += `‚Ä¢ ${item}\n`;
        });
        await flowDynamic(str);
        return returnToPrograms(gotoFlow);
      case "2":
        str = "*Nuestros programas manejan los siguientes horarios:*";
        state.getMyState().searchedProgram.schedules.map((item) => {
          const { schedule } = item;
          str += `
          *${schedule.days}*
            *_Jornada:_*  ${schedule.time} 
            *_Duraci√≥n:_* ${item.duration}
          `;
        });

        await flowDynamic(str);
        return returnToPrograms(gotoFlow);
      case "3":
        str = "*A continuaci√≥n te dejamos el listado de precios:* ";
        costos.map((item) => {
          str += `
              *${item.title}*
              ${item.matricula}
              ${item.seguro}
              ${item.mensualidad}
              ${item.completo}
          `;
        });
        await flowDynamic(str);
        return returnToPrograms(gotoFlow);
      case "4":
        await state.update({ asesor: true });

        validateHour()
          .then(async () => {
            await flowDynamic(
              "‚è≥ Ser√°s redirigido con un asesor que te guiar√° con tu proceso de matr√≠cula üèÉ‚Äç‚ôÇÔ∏è"
            );
            setTimeout(async () => {
              await state.update({ asesor: false });
            }, ADVISER);
          })
          .catch(async (err) => {
            await flowDynamic(err);
            await state.update({ asesor: false });
            return gotoFlow(flowprograms);
          });
        break;
      case "0":
        return gotoFlow(flowmainmenu);
      case "8":
        return gotoFlow(flowprograms);
      case "9":
        return gotoFlow(flowexit);
      default:
        return fallBack(["Por favor ingresa una opci√≥n valida"]);
    }
  }
);

const flowscheduleservices = addKeyword(EVENTS.ACTION).addAnswer(
  [
    "¬øEn qu√© jornada deseas realizarte el procedimiento?",
    "",
    "1) Lunes a viernes - ma√±ana",
    "2) Lunes a viernes - tarde",
    "3) S√°bados",
    "",
    "0) Regresar al men√∫ principal",
    "8) Regresar al men√∫ anterior",
    "9) Salir",
  ],
  { capture: true, idle: IDLE },
  async (ctx, { gotoFlow, fallBack, flowDynamic, state }) => {
    if (ctx?.idleFallBack) {
      return gotoFlow(flowexit);
    }

    switch (ctx.body) {
      case "1":
      case "2":
      case "3":
        await state.update({
          service: {
            ...state.getMyState().service,
            schedule: services.schedules[parseInt(ctx.body) - 1],
          },
          asesor: true,
        });

        validateHour()
          .then(async () => {
            await flowDynamic(
              "‚è≥ Ser√°s redirigido con un asesor que te indicar√° las fechas disponibles üìÖ"
            );
            setTimeout(async () => {
              await state.update({ asesor: false });
            }, ADVISER);
          })
          .catch(async (err) => {
            await flowDynamic(err);
            await state.update({ asesor: false });
            return gotoFlow(flowprograms);
          });

        break;
      case "0":
        return gotoFlow(flowmainmenu);
      case "8":
        return gotoFlow(flowservices);
      case "9":
        return gotoFlow(flowexit);
      default:
        return fallBack(["Por favor ingresa una opci√≥n valida"]);
    }
  }
);

const flowinstitutiondata = addKeyword(EVENTS.ACTION)
  .addAnswer(
    ["Ingresa el nombre de la instituci√≥n que solicita el servicio"],
    { capture: true, idle: IDLE },
    async (ctx, { gotoFlow, fallBack, state }) => {
      if (ctx?.idleFallBack) {
        return gotoFlow(flowexit);
      }

      if (!regex.validacionNombre.test(ctx.body)) {
        return fallBack(
          "Por favor ingresa un nombre v√°lido, *sin puntos, n√∫meros o caracteres especiales*"
        );
      }

      await state.update({
        institutionData: {
          ...state.getMyState().institutionData,
          nameInstitution: ctx.body,
        },
      });
    }
  )
  .addAnswer(
    ["Ingresa el lugar donde se realizara la brigada"],
    { capture: true, idle: IDLE },
    async (ctx, { gotoFlow, state }) => {
      if (ctx?.idleFallBack) {
        return gotoFlow(flowexit);
      }

      await state.update({
        institutionData: {
          ...state.getMyState().institutionData,
          place: ctx.body,
        },
      });
    }
  )
  .addAnswer(
    [
      "Ingresa la fecha estipulada para el evento (dd/mm/yyyy)",
      `*Ejemplo: (${new Date().toLocaleString().split(",")[0]})*`,
    ],
    { capture: true, idle: IDLE },
    async (ctx, { fallBack, state }) => {
      if (ctx?.idleFallBack) {
        return gotoFlow(flowexit);
      }

      //TODO: Implementar el validador de fechas

      await state.update({
        institutionData: {
          ...state.getMyState().institutionData,
          date: ctx.body,
        },
      });
    }
  )
  .addAnswer(
    [
      "Ingresa la cantidad de personas estimadas a atender",
      `*Ejemplo: (${new Date().toLocaleString().split(",")[0]})*`,
    ],
    { capture: true, idle: IDLE },
    async (ctx, { fallBack, state }) => {
      if (ctx?.idleFallBack) {
        return gotoFlow(flowexit);
      }

      if (!regex.validateNumber.test(ctx.body)) {
        return fallBack(["Por favor ingresa una opci√≥n valida"]);
      }

      await state.update({
        institutionData: {
          ...state.getMyState().institutionData,
          amount: ctx.body,
        },
      });
    }
  )
  .addAnswer(
    [
      "Ingrese los servicios que desea realizar en el evento separado por comas (',').",
      "",
      "*Recuerde que los servicios disponibles son:",
      "*  ‚Ä¢ PELUQUERIA*",
      "*  ‚Ä¢ MANICURE*",
      "*  ‚Ä¢ SERVICIOS DE CEJAS*",
      "*  ‚Ä¢ HIGIENE FACIAL*",
      "*  ‚Ä¢ MAQUILLAJE*",
    ],
    { capture: true, idle: IDLE },
    async (ctx, { state, flowDynamic, gotoFlow }) => {
      if (ctx?.idleFallBack) {
        return gotoFlow(flowexit);
      }

      await state.update({
        institutionData: {
          ...state.getMyState().institutionData,
          services: ctx.body,
        },
      });

      await state.update({ asesor: true });
   

      validateHour()
        .then(async () => {
          await flowDynamic(
            "*‚è≥üèÉ‚Äç‚ôÇÔ∏è Ser√°s redirigido con un asesor para confirmar el servicio üèÉ‚Äç‚ôÇÔ∏è*"
          );
          setTimeout(async () => {
            await state.update({ asesor: false });
          }, ADVISER);
        })
        .catch(async (err) => {
          await flowDynamic(err);
          await state.update({ asesor: false });
          return gotoFlow(flowprograms);
        });

      console.log(
        "Este es mi estado al final de data institution",
        state.getMyState()
      );
    }
  );

const flowprograms = addKeyword(EVENTS.ACTION).addAnswer(
  [
    "¬øEn que programa t√©cnico estas interesado?",
    "1) Cuidado est√©tico de manos y pies",
    "2) Maquillaje art√≠stico y decorativo",
    "3) Peluquer√≠a",
    "4) Barber√≠a y peluquer√≠a masculina",
    "",
    "8) Regresar al men√∫ anterior",
    "9) Salir",
  ],
  { capture: true, idle: IDLE },
  async (ctx, { gotoFlow, fallBack, flowDynamic, state }) => {
    if (ctx?.idleFallBack) {
      return gotoFlow(flowexit);
    }

    switch (ctx.body) {
      case "1":
      case "2":
      case "3":
      case "4":
        await state.update({ idProgram: programs[ctx.body] });
        getProgram(programs[ctx.body])
          .then(async (response) => {
            if (response.status != 200) {
              await flowDynamic(
                "Estamos presentando problemas t√©cnicos, por favor int√©ntalo de nuevo en unos minutos."
              );
              console.log("Ocurrio un error:", { err });
              return gotoFlow(flowexit);
            }
            await state.update({ searchedProgram: response.data });
          })
          .catch(async (err) => {
            await flowDynamic(
              "Estamos presentando problemas t√©cnicos, por favor int√©ntalo de nuevo en unos minutos."
            );
            console.log("Ocurrio un error:", { err });
            return gotoFlow(flowexit);
          });
        break;
      case "8":
        return gotoFlow(flowmainmenu);
      case "9":
        return gotoFlow(flowexit);
      default:
        return fallBack(["Por favor ingresa una opci√≥n valida"]);
    }

    return gotoFlow(flowmenuprograms);
  },
  [flowmenuprograms]
);

const flowservices = addKeyword(EVENTS.ACTION).addAnswer(
  [
    "Marca la opci√≥n por la cual necesitas informaci√≥n",
    "",
    "1) Manos y pies",
    "2) Implantes",
    "3) Tratamientos capilares",
    "4) Higiene facial",
    "5) Corte de cabello",
    "6) Blower _(Cepillado)_",
    "",
    "8) Regresar al men√∫ anterior",
    "9) Salir",
    "",
    "*Los procedimientos no tienen ning√∫n costo.*",
    "*_Recuerda adquirir kit de BIOSEGURIDAD y los productos que se requieren._*",
  ],
  { capture: true, idle: IDLE },
  async (ctx, { gotoFlow, fallBack, flowDynamic, state }) => {
    if (ctx?.idleFallBack) {
      return gotoFlow(flowexit);
    }

    switch (ctx.body) {
      case "1":
      case "2":
      case "3":
      case "4":
      case "5":
      case "6":
        await state.update({
          service: { desc: services.desc[parseInt(ctx.body) - 1] },
        });
        return gotoFlow(flowscheduleservices);
      case "8":
        return gotoFlow(flowmainmenu);
      case "9":
        return gotoFlow(flowexit);
      default:
        return fallBack(["Por favor ingresa una opci√≥n valida"]);
    }
  },
  [flowscheduleservices]
);

const flowbrigades = addKeyword(EVENTS.ACTION)
  .addAnswer([
    "La Academia Francia Belleza y Dise√±o Cauca, instituci√≥n para el trabajo y desarrollo humano, legalmente constituida en la ciudad de Popay√°n desde el a√±o 2005, con Licencia de Funcionamiento #20161700124544 de 19 SEPTIEMBRE DE 2016, tiene un componente social, ofreciendo a la comunidades Popay√°n y municipios aleda√±os los SERVICIOS GRATUITOS en corte de cabello femenino y masculino, manicure tradicional, dise√±o de cejas, entre otros.",
  ])
  .addAnswer(
    conditions,
    null,
    (_, { gotoFlow }) => {
      setTimeout(() => {
        return gotoFlow(flowinstitutiondata);
      }, 3000);
    },
    [flowinstitutiondata]
  );

const flowmainmenu = addKeyword(EVENTS.ACTION).addAnswer(
  [
    "Marca la opci√≥n por la cual necesitas informaci√≥n",
    "",
    "1) Programas educativos",
    "2) Servicios a realizar",
    "3) Brigadas",
    "",
    "9) Salir",
  ],
  { capture: true, idle: IDLE },
  async (ctx, { gotoFlow, fallBack, flowDynamic, state }) => {
    if (ctx?.idleFallBack) {
      return gotoFlow(flowexit);
    }

    switch (ctx.body) {
      case "1":
        return gotoFlow(flowprograms);
      case "2":
        return gotoFlow(flowservices);
      case "3":
        return gotoFlow(flowbrigades);
      case "9":
        return gotoFlow(flowexit);
      default:
        return fallBack(["Por favor ingresa una opci√≥n valida"]);
    }
  },
  [flowprograms, flowservices, flowbrigades]
);

const flowuserdata = addKeyword(EVENTS.ACTION)
  .addAnswer(
    ["Por favor ind√≠canos cu√°l es tu nombre"],
    { capture: true, idle: IDLE },
    async (ctx, { gotoFlow, fallBack, state }) => {
      if (ctx?.idleFallBack) {
        return gotoFlow(flowexit);
      }

      if (!regex.validacionNombre.test(ctx.body)) {
        return fallBack(
          "Por favor ingresa un nombre v√°lido, *sin puntos, n√∫meros o caracteres especiales*"
        );
      }

      await state.update({ userData: { name: ctx.body } });
    }
  )
  .addAnswer(
    [
      "Seleccione el tipo de documento de identidad",
      "",
      "1) C√©dula de ciudadan√≠a",
      "2) Tarjeta de identidad",
      "3) C√©dula de extranjer√≠a",
    ],
    { capture: true, idle: IDLE },

    async (ctx, { gotoFlow, fallBack, state }) => {
      if (ctx?.idleFallBack) {
        return gotoFlow(flowexit);
      }

      switch (ctx.body) {
        case "1":
          await state.update({
            userData: { ...state.get("userData"), documentType: "CC" },
          });
          break;
        case "2":
          await state.update({
            userData: { ...state.get("userData"), documentType: "TI" },
          });
          break;
        case "3":
          await state.update({
            userData: { ...state.get("userData"), documentType: "CE" },
          });
          break;
        default:
          return fallBack("Ingresa una opci√≥n v√°lida");
      }
    }
  )
  .addAnswer(
    [
      "Escribe tu n√∫mero de documento de identidad",
      "",
      "*Solo n√∫meros, sin comas, puntos o caracteres especialesa*",
    ],
    { capture: true, idle: IDLE },

    async (ctx, { gotoFlow, fallBack, state }) => {
      if (ctx?.idleFallBack) {
        return gotoFlow(flowexit);
      }

      if (!regex.dacionIdentificacion.test(ctx.body)) {
        return fallBack(
          "Por favor ingresa un documento valido, *sin puntos, comas, letras o caracteres especiales*"
        );
      }
      await state.update({
        userData: { ...state.get("userData"), documentNumber: ctx.body },
      });
    }
  )
  .addAnswer(
    [
      "Ingresa el n√∫mero de telefono celular de contacto, sin indicador de pais. ",
      " ",
      "*Debe tener 10 digitos*",
    ],
    { capture: true, idle: IDLE },

    async (ctx, { gotoFlow, fallBack, state }) => {
      if (ctx?.idleFallBack) {
        return gotoFlow(flowexit);
      }

      if (!regex.validacionContacto.test(ctx.body)) {
        return fallBack(
          "Por favor ingresa un n√∫mero de contacto valido, *sin puntos, comas, letras o caracteres especiales*"
        );
      }
      await state.update({
        userData: { ...state.get("userData"), contactNumber: ctx.body },
      });
    }
  )
  .addAnswer(
    [
      "¬øEn qu√© ciudad, corregimiento o vereda te encuentras?",
      "",
      "*Sin n√∫meros, comas, puntos o caracteres especialesa*",
    ],
    { capture: true, idle: IDLE },

    async (ctx, { gotoFlow, fallBack, state }) => {
      if (ctx?.idleFallBack) {
        return gotoFlow(flowexit);
      }

      if (!regex.validacionNombre.test(ctx.body)) {
        return fallBack(
          "Por favor ingresa un nombre valido, *sin puntos, comas, numeros o caracteres especiales*"
        );
      }

      await state.update({
        userData: { ...state.get("userData"), location: ctx.body },
      });

      return gotoFlow(flowmainmenu);
    },
    [flowmainmenu, flowexit]
  );

const flowPrincipal = addKeyword(EVENTS.WELCOME)
  .addAction(async (_, { state, endFlow }) => {
    const myState = state.getMyState();

    if (!!myState && !!myState.asesor) {
      return endFlow();
    }
  })
  .addAnswer([
    "Hola, te damos la bienvenida a nuestro canal de WhatsApp *ACADEMIA FRANCIA BELLEZA Y DISE√ëO CAUCA*",
  ])
  .addAnswer([
    "Soy tu asistente virtual y me encanta estar aqu√≠ para ayudarte, cuenta conmigo para lo que necesites.",
  ])
  .addAnswer([
    "Al utilizar este medio aceptas las pol√≠ticas, t√©rminos y condiciones, responsabiliz√°ndote de la informaci√≥n que sea compartida a trav√©s de este medio y autoriza el uso de esta misma a la *ACADEMIA FRANCIA BELLEZA Y DISE√ëO CAUCA* basado en la pol√≠tica de tratamiento de informaci√≥n en http://adacemiafrancia.com.co/tratamiento-de-datos",
  ])
  .addAnswer(
    [
      "Autorizo el tratamiento de datos personales y acepto los t√©rminos y condiciones de nuestros canales de atenci√≥n.",
      "",
      "1) Aceptar",
      "2) Rechazar",
    ],
    { capture: true, idle: IDLE },
    (ctx, { fallBack, gotoFlow }) => {
      if (ctx?.idleFallBack) {
        return gotoFlow(flowexit);
      }

      switch (ctx.body) {
        case "1":
          return gotoFlow(flowuserdata);
        case "2":
          return gotoFlow(flowexit);
        default:
          return fallBack();
      }
    },
    [flowuserdata]
  );

const main = async () => {
  const adapterDB = new MongoAdapter({
    dbUri: MONGO_DB_URI,
    dbName: MONGO_DB_NAME,
  });
  const adapterFlow = createFlow([
    flowPrincipal,
    flowuserdata,
    flowinstitutiondata,
  ]);
  const adapterProvider = createProvider(BaileysProvider);

  createBot({
    flow: adapterFlow,
    provider: adapterProvider,
    database: adapterDB,
  });
  QRPortalWeb();
};

main();
